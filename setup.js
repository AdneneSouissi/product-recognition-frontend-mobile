#!/usr/bin/env node

/**
 * Setup script for Product Recognition Mobile App
 * This script helps configure the API endpoint and verify the setup
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const CONFIG_PATH = path.join(__dirname, 'src', 'config', 'config.js');

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function getCurrentIP() {
  const { networkInterfaces } = require('os');
  const nets = networkInterfaces();
  const results = [];

  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      if (net.family === 'IPv4' && !net.internal) {
        results.push(net.address);
      }
    }
  }

  return results;
}

async function updateConfig(apiUrl) {
  const configContent = `/**
 * Configuration file for the Product Recognition Mobile App
 * 
 * This file was auto-generated by the setup script
 */

export const CONFIG = {
  // Backend API URL
  API_BASE_URL: '${apiUrl}',
  
  // Alternative configurations for different environments
  DEVELOPMENT: {
    API_BASE_URL: '${apiUrl}',
  },
  
  PRODUCTION: {
    API_BASE_URL: 'https://your-production-api.com',
  },
  
  // WebSocket configuration
  WS_RECONNECT_INTERVAL: 3000,
  WS_MAX_RECONNECT_ATTEMPTS: 5,
  
  // Camera configuration
  CAMERA_QUALITY: 0.7,
  REAL_TIME_CAPTURE_INTERVAL: 1000, // milliseconds
  
  // Image processing configuration
  MAX_IMAGE_WIDTH: 800,
  MAX_IMAGE_HEIGHT: 600,
  COMPRESSION_QUALITY: 0.8,
};

/**
 * Get API base URL based on environment
 */
export const getApiBaseUrl = () => {
  return CONFIG.API_BASE_URL;
};

/**
 * Helper function to construct API endpoints
 */
export const API_ENDPOINTS = {
  PREDICT: \`\${getApiBaseUrl()}/predict\`,
  WS_PREDICT: \`ws://\${getApiBaseUrl().replace('http://', '')}/ws/predict\`,
  ADD_TO_DATABASE: \`\${getApiBaseUrl()}/add_to_database\`,
};`;

  try {
    fs.writeFileSync(CONFIG_PATH, configContent);
    console.log('‚úÖ Configuration updated successfully!');
  } catch (error) {
    console.error('‚ùå Error updating configuration:', error.message);
  }
}

async function main() {
  console.log('üõí Product Recognition Mobile App Setup');
  console.log('======================================\n');

  // Get current IP addresses
  const ips = await getCurrentIP();
  
  if (ips.length > 0) {
    console.log('üì° Detected IP addresses on your system:');
    ips.forEach((ip, index) => {
      console.log(`   ${index + 1}. ${ip}`);
    });
    console.log('');
  }

  // Ask for backend URL
  const defaultUrl = ips.length > 0 ? `http://${ips[0]}:8000` : 'http://192.168.1.100:8000';
  const apiUrl = await question(`üîó Enter your backend API URL (default: ${defaultUrl}): `);
  
  const finalUrl = apiUrl.trim() || defaultUrl;
  
  // Validate URL format
  try {
    new URL(finalUrl);
  } catch (error) {
    console.log('‚ùå Invalid URL format. Please make sure to include http:// or https://');
    rl.close();
    return;
  }

  await updateConfig(finalUrl);

  console.log('\nüìã Setup Summary:');
  console.log(`   API URL: ${finalUrl}`);
  console.log(`   Config file: ${CONFIG_PATH}`);
  
  console.log('\nüöÄ Next steps:');
  console.log('   1. Make sure your backend server is running');
  console.log('   2. Run "npm start" to start the development server');
  console.log('   3. Use Expo Go app to scan the QR code');
  console.log('   4. Test the app with your camera or image gallery');

  console.log('\nüí° Troubleshooting:');
  console.log('   - Ensure your mobile device is on the same WiFi network');
  console.log('   - Check if the backend server is accessible from your IP');
  console.log('   - Verify camera permissions are granted in your device settings');

  rl.close();
}

main().catch(console.error);
